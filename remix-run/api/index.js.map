{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/benjaminjohnson/dev/portfolio/remix-run/app/root.tsx", "../app/components/header.tsx", "../app/components/banner.tsx", "/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/tags/$tag.tsx", "../app/components/post-list-item.tsx", "../app/components/tag.tsx", "../app/lib/posts.server.ts", "../app/lib/process-content.ts", "../app/lib/parse-markdown.ts", "../app/lib/prune-hast.ts", "/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/writing.tsx", "/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/$slug.tsx", "../app/components/markdown-renderer.tsx", "/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/index.tsx", "../app/lib/read-file.server.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { LinksFunction, MetaFunction } from '@remix-run/node'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useMatches,\n} from '@remix-run/react'\nimport clsx from 'clsx'\nimport { z } from 'zod'\nimport { Header } from '~/components/header'\nimport { Banner } from './components/banner'\nimport styles from './styles/app.css'\n\nexport const links: LinksFunction = () => {\n  return [{ rel: 'stylesheet', href: styles }]\n}\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Benjamin Johnson',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\nconst RouteLayoutSeoDataSchema = z.object({\n  title: z.string(),\n  subtitle: z.string().optional(),\n  preserveTitleCasing: z.boolean().optional(),\n  // do we need this info, given the route itself can do metadata??\n  // TODO: test whether the nested route's SEO \"wins\"\n  seo: z\n    .object({\n      title: z.string().optional(),\n      description: z.string().optional(),\n      keywords: z.array(z.string()).optional(),\n    })\n    .optional(),\n})\n\ntype RouteLayoutSeoData = z.infer<typeof RouteLayoutSeoDataSchema>\ntype ArrayElement<ArrayType extends readonly unknown[]> =\n  ArrayType extends readonly (infer ElementType)[] ? ElementType : never\n\ntype RouteMatch<T extends unknown> = ArrayElement<\n  Omit<ReturnType<typeof useMatches>, 'data'>\n> & { data: T }\n\nexport default function App() {\n  const matches = useMatches()\n  const match = matches.find((route) => {\n    const routeData = RouteLayoutSeoDataSchema.safeParse(route.data)\n    return routeData.success\n  }) as RouteMatch<RouteLayoutSeoData> | undefined\n\n  const data = match?.data\n\n  const preserveTitleCasing = false\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"font-mono dark:bg-gray-800 dark:text-white\">\n        <div className=\"relative\">\n          <div className=\"absolute inset-x-0 top-0\">\n            <Header />\n          </div>\n        </div>\n\n        <Banner>\n          <div className=\"space-y-4\">\n            {data?.title && (\n              <h1\n                className={clsx(\n                  'text-5xl font-bold break-words',\n                  !preserveTitleCasing && 'lowercase'\n                )}\n              >\n                {data.title}\n              </h1>\n            )}\n\n            {data?.subtitle && (\n              <h2 className=\"text-2xl font-normal text-gray-700 lowercase dark:text-gray-400\">\n                {data.subtitle}\n              </h2>\n            )}\n          </div>\n        </Banner>\n\n        <div className=\"p-4 pt-10 mx-auto my-0 max-w-viewport md:max-w-prose\">\n          <Outlet />\n        </div>\n\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n", "import clsx from 'clsx'\nimport { NavLink, Link } from '@remix-run/react'\nimport { Container } from './Container'\nimport { ReactNode } from 'react'\n\ntype HeaderLinkProps = {\n  href: string\n  title: string\n  children: ReactNode\n}\n\nconst HeaderLink = ({ href, title, children }: HeaderLinkProps) => {\n  return (\n    <NavLink\n      to={href}\n      title={title}\n      className={({ isActive }) =>\n        clsx(\n          'text-base no-underline',\n          isActive\n            ? 'text-black font-bold dark:text-white'\n            : 'text-gray-800 font-normal dark:text-gray-200'\n        )\n      }\n    >\n      {children}\n    </NavLink>\n  )\n}\n\nexport const Header = () => {\n  return (\n    <header className=\"z-header max-w-viewport\">\n      {/* TODO: separate container comp? */}\n      <div className=\"max-w-prose my-0 mx-auto\">\n        <div className=\"justify-between block p-4 space-y-2 sm:flex sm:space-y-0\">\n          <Link\n            to=\"/\"\n            className=\"inline-block text-xl font-medium text-black no-underline dark:text-white\"\n          >\n            <span className=\"lowercase\">Benjamin Johnson</span>\n          </Link>\n\n          <div className=\"flex mt-2 space-x-4 lowercase\">\n            <nav>\n              <div className=\"flex items-center space-x-4\">\n                <HeaderLink title=\"Writing\" href=\"/writing\">\n                  writing\n                </HeaderLink>\n\n                <HeaderLink title=\"GitHub\" href=\"https://github.com/benjamminj\">\n                  github\n                </HeaderLink>\n\n                <HeaderLink\n                  title=\"Contact\"\n                  href=\"mailto:benjamin.d.johnson@icloud.com\"\n                >\n                  contact\n                </HeaderLink>\n              </div>\n            </nav>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n", "import { ReactNode } from 'react'\n\ninterface BannerProps {\n  children: ReactNode\n}\n\nexport const Banner = ({ children }: BannerProps) => {\n  return (\n    <div className=\"flex items-end pt-48 pb-8 bg-gray-100 min-h-32 dark:bg-gray-900\">\n      <div className=\"w-full px-4 mx-auto my-0 max-w-viewport md:max-w-prose\">\n        {children}\n      </div>\n    </div>\n  )\n}\n", "import type { LoaderFunction, MetaFunction } from '@remix-run/node'\nimport { useLoaderData } from '@remix-run/react'\nimport { z } from 'zod'\nimport { PostListItem } from '~/components/post-list-item'\nimport * as PostsService from '~/lib/posts.server'\n\nexport const meta: MetaFunction = ({ data }) => {\n  return {\n    title: data.title,\n    description: `All posts categorized with \"${data.tag}\"`,\n  }\n}\n\ntype LoaderData = {\n  title: string\n  posts: PostsService.Post[]\n}\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const tag = z.string().parse(params.tag)\n  const posts = await PostsService.list()\n  const filtered = posts.filter((post) => post.tags?.includes(tag))\n  const pruned = filtered.map(({ content, ...rest }) => rest)\n  return {\n    title: `#${tag}`,\n    subtitle: `${filtered.length} ${filtered.length === 1 ? 'post' : 'posts'}`,\n    posts: pruned,\n  }\n}\n\nexport default function TagRoute() {\n  const data = useLoaderData<LoaderData>()\n  return (\n    <main>\n      <ul className=\"space-y-2\">\n        {data?.posts.map((post) => (\n          <li className=\"w-full\" key={post.slug}>\n            <PostListItem post={post} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  )\n}\n", "import { Link } from '@remix-run/react'\nimport type { Post } from '~/lib/posts.server'\nimport { Tag } from './tag'\n\nexport const PostListItem = ({ post }: { post: Post }) => {\n  return (\n    <div className=\"relative p-4 -mx-4 hover:bg-gray-100 dark:hover:bg-gray-900 dark:hover:bg-opacity-50\">\n      <div className=\"space-y-1 md:flex md:space-y-0 md:space-x-4\">\n        <time className=\"text-gray-500 dark:text-gray-400 flex items-end flex-shrink-0 font-mono text-sm md:h-8 md:pt-1 md:pb-1.5 tabular-nums leading-none\">\n          {post.date}\n        </time>\n\n        <div>\n          {/* TODO: dynamic `h` tag  */}\n          <h2 className=\"text-2xl\">\n            <Link\n              to={`/${post.slug}`}\n              data-testid=\"PostListItem__title\"\n              title={post.title}\n              className=\"font-semibold text-gray-800 no-underline hover:text-gray-800 dark:text-gray-200 dark:hover:text-white hover:underline before:empty-content before:absolute before:inset-0\"\n            >\n              {post.title}\n            </Link>\n          </h2>\n\n          {post.tags?.length > 0 && (\n            <ul className=\"relative z-10 flex flex-wrap -ml-2\">\n              {post.tags.map((tag) => (\n                <li key={tag} className=\"ml-2\">\n                  <Tag tag={tag} />\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n", "import { Link } from '@remix-run/react'\n\n/**\n * Each `<Tag>` corresponds to a post `tag` value. All tags are links,\n * so clicking on one allows you to view all posts that have the same tag.\n */\nexport const Tag = ({ tag }: { tag: string }) => {\n  const tagText = `#${tag}`\n\n  return (\n    <Link\n      to={`/tags/${tag}`}\n      className=\"inline-block p-1 -m-1 font-mono text-xs text-gray-600 no-underline rounded dark:text-gray-400 hover:text-gray-800 hover:bg-gray-100 hover:underline dark:hover:text-gray-50 dark:hover:bg-gray-900\"\n    >\n      {tagText}\n    </Link>\n  )\n}\n", "import { z } from 'zod'\nimport fm from 'front-matter'\nimport fs from 'node:fs/promises'\nimport path from 'node:path'\nimport { parseMarkdown } from './parse-markdown'\nimport { processContent } from './process-content'\n\nconst FormattedDateSchema = z.date().transform(date => {\n  const iso = date.toISOString()\n\n  // We split the ISO string into its components using a regex to avoid timezone conversions\n  // that occur when using date.getMonth, date.getDay, etc. This makes sure that the date\n  // is stable (always in GMT timezone) regardless of where the build was run.\n  const [y, m, d] = iso.split(/[-T]/)\n  return [y, m?.padStart(2, '0'), d?.padStart(2, '0')].join('-')\n})\n\nconst PostSchema = z\n  .object({\n    slug: z.string(),\n    title: z.string(),\n    date: FormattedDateSchema,\n    lastUpdated: FormattedDateSchema.optional(),\n    description: z.string().optional(),\n    tags: z.array(z.string()).default([]),\n    body: z.string(),\n    // TODO: HAST type...\n    content: z.any(),\n  })\n  .transform(({ lastUpdated, date, ...rest }) => ({\n    ...rest,\n    date: lastUpdated ?? date,\n  }))\n\nexport type Post = z.infer<typeof PostSchema>\n\n/**\n * Take the file path of a given blog post file and turn it into a \"slug\" that's URL-safe.\n */\nconst slugifyPostPath = (file: string): string => {\n  // const [, path] = fullPath.split('/content/writing/')\n  return file.replace('/index.md', '').replace(/\\.md$/, '')\n}\n\nlet __cached_posts__: Post[] = []\n\n/**\n * Lists all posts available in the posts directory\n *\n * TODO:\n * This function needs to index the directory, slugify each post, and load it into\n * the array of posts.\n *\n * I'm almost wondering if it's \"easier\" to load all these posts into something like\n * SQLite, since we won't take a perf hit (they're all prerendered.)\n *\n * TODO: sorting / filtering?\n */\nexport const list = async () => {\n  if (__cached_posts__.length > 0) {\n    return __cached_posts__\n  }\n\n  const postPaths = await fs.readdir(\n    path.join(__dirname, '../content/writing/')\n  )\n\n  const promises = []\n  for (const filePath of postPaths) {\n    const promise = async () => {\n      const contents = await fs.readFile(\n        path.join(__dirname, '../content/writing', filePath),\n        'utf8'\n      )\n      return [filePath, contents]\n    }\n\n    promises.push(promise())\n  }\n\n  const rawPosts = await Promise.all(promises)\n\n  const posts: Post[] = await Promise.all(\n    rawPosts.map(async ([path, contents]) => {\n      const { hast, ...attributes } = await processContent(contents)\n      return await PostSchema.parseAsync({\n        slug: slugifyPostPath(path),\n        ...attributes,\n        body: 'TBD',\n        content: hast,\n      })\n    })\n  )\n\n  posts.sort((a, b) => b.date.localeCompare(a.date))\n  __cached_posts__ = posts\n  return posts\n}\n\n/**\n * Gets a single post by slug\n */\nexport const get = async (slug: string) => {\n  const posts = await list()\n  const post = posts.find(p => p.slug === slug)\n  return post\n}\n", "import fm from 'front-matter'\nimport { parseMarkdown } from './parse-markdown'\n\n// TODO: can we just roll this into `parseMarkdown`?\nexport const processContent = async (raw: string) => {\n  const { body, attributes } = fm<Record<string, unknown>>(raw)\n\n  const hast = await parseMarkdown(body)\n  return {\n    ...attributes,\n    hast,\n  }\n}\n", "import Prism from 'prismjs'\n// import { unified } from 'unified'\nimport type { HtmlAst, HtmlAstNode } from './hast.types'\nimport { pruneAst } from './prune-hast'\n// Import syntax highlighting for languages used across the blog.\n//\n// This is not a perfect solution, since language syntaxes have to be manually\n// added here. This means that using a new language in an article will not result\n// in it automatically being highlighted.\n//\n// However, this approach is far simpler than the alternative approach of dynamically\n// importing syntaxes, which relies on Node.js internals (i.e. no moving to CF workers)\n// and is a lot of complex, manual code.\n//\n// TODO: In the future, it may be better to dynamically load these\n// or to generate a list of syntaxes needed using the prism CLI. OR it may be simpler/better\n// to simply load ALL syntaxes up-front depending on the memory load (might be too\n// high for lambda / edge functions + SSR)\nimport 'prismjs/components/prism-clike.min.js'\nimport 'prismjs/components/prism-markup.min.js'\nimport 'prismjs/components/prism-javascript.min.js'\nimport 'prismjs/components/prism-jsx.min.js'\nimport 'prismjs/components/prism-typescript.min.js'\nimport 'prismjs/components/prism-tsx.min.js'\nimport 'prismjs/components/prism-bash.min.js'\nimport 'prismjs/components/prism-haskell.min.js'\nimport 'prismjs/components/prism-diff.min.js'\nimport 'prismjs/components/prism-json.min.js'\n\nconst unified = import(\"unified\")\nconst remarkParse = import('remark-parse')\nconst remarkRehype = import('remark-rehype')\n\nconst highlight = (code: string, lang?: string) => {\n\tif (!lang) return code\n\tif (!Prism.languages[lang]) {\n\t\tconsole.warn('language syntax not found:', lang)\n\t\treturn ''\n\t}\n\n\treturn Prism.highlight(code, Prism.languages[lang], lang)\n}\n\nexport const highlightCodeBlocks = (ast: HtmlAst) => {\n\tconst transform = (node: HtmlAstNode): HtmlAstNode => {\n\t\tif (node.type === 'code') {\n\t\t\tconst value = highlight(node.value, node.lang)\n\t\t\treturn {\n\t\t\t\t...node,\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\n\t\tif (node.children) {\n\t\t\tconst mappedChildren = node.children.map(transform)\n\t\t\treturn {\n\t\t\t\t...node,\n\t\t\t\tchildren: mappedChildren\n\t\t\t}\n\t\t}\n\n\t\treturn node\n\t}\n\n\tconst children = ast.children.map(transform)\n\treturn {\n\t\t...ast,\n\t\tchildren\n\t}\n}\n\n/**\n * Responsible for taking in a markdown string and returning the resulting HTML.\n *\n * A couple things to note:\n * - Code blocks will be highlighted using PrismJS\n * - At the current time, frontmatter is not extracted, so that needs to be done separately.\n */\nexport const parseMarkdown = async (markdown: string) => {\n  const { unified: unifiedInstance } = await unified\n  const { default: remarkParseInstance } = await remarkParse\n  const { default: remarkRehypeInstance } = await remarkRehype\n\t// // Spits out a hast (HTML AST) of the markdown, this can later be processed by Svelte\n\t// // into individual components.\n\tconst hast = await unifiedInstance()\n\t\t.use(remarkParseInstance)\n\t\t.use(remarkRehypeInstance)\n\t\t.parse(markdown) as unknown as HtmlAst\n\n\tconst highlightedHast = highlightCodeBlocks(hast)\n\n\treturn pruneAst(highlightedHast)\n}\n\nexport type PrunedHast = Awaited<ReturnType<typeof parseMarkdown>>", "import type { HtmlAstNode, HtmlAst } from './hast.types'\n\n/**\n * Given a HAST node, remove the position. This is not used by the markdown rendering\n * and dramatically decreases the size of the payload (sometimes up to 50% smaller!!)\n */\nconst pruneHastNode = (node: HtmlAstNode): Omit<HtmlAstNode, 'position'> => {\n\tconst { position: _position, ...rest } = node\n\treturn rest\n}\n\n/**\n * @todo docsssss\n */\nexport const pruneAst = (ast: HtmlAst) => {\n\ttype TransformedNode = Omit<HtmlAstNode, 'position' | 'children'> & {\n\t\tchildren?: TransformedNode[]\n\t}\n\n\t// TODO: better naming, since this is the inner fn!!\n\tconst transformHastNode = (node: HtmlAstNode): TransformedNode => {\n\t\tlet children: TransformedNode[] | undefined\n\n\t\tif (node.children) {\n\t\t\tconst transformedChildren: TransformedNode[] = node.children.map(transformHastNode)\n\t\t\tchildren = transformedChildren\n\t\t}\n\n\t\tconst { children: _, ...pruned } = pruneHastNode(node)\n\t\treturn {\n\t\t\t...pruned,\n\t\t\tchildren\n\t\t}\n\t}\n\n\tconst transformedChildren = ast.children.map(transformHastNode)\n\tconst { children: _children, position: _pos, ...rest } = ast\n\treturn {\n\t\t...rest,\n\t\tchildren: transformedChildren\n\t}\n}", "import type { LoaderFunction, MetaFunction } from \"@remix-run/node\"\nimport { useLoaderData } from \"@remix-run/react\"\nimport { PostListItem } from \"~/components/post-list-item\"\nimport * as PostsService from '~/lib/posts.server'\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Writing'\n  }\n}\n\ntype LoaderData = {\n  title: string;\n  posts: PostsService.Post[]\n}\n\nexport const loader:LoaderFunction = async () => {\n  const posts = await PostsService.list()\n  const pruned = posts.map(({ content, ...rest }) => rest)\n  return {\n    title: 'Writing',\n    subtitle: `${pruned.length} ${pruned.length === 1 ? 'post' : 'posts'}`,\n    posts: pruned\n  }\n}\n\nexport default function WritingRoute() {\n  const data = useLoaderData<LoaderData>()\n  return <main>\n    <ul className=\"space-y-2\">\n      {data?.posts.map(post => (\n        <li className=\"w-full\" key={post.slug}><PostListItem post={post}/></li>\n      ))}\n    </ul>\n\n  </main>\n}\n", "import { useLoaderData } from '@remix-run/react'\nimport { z } from 'zod'\nimport { get } from '~/lib/posts.server'\n\nimport type { Post } from '~/lib/posts.server'\nimport type { LoaderFunction } from '@remix-run/node'\nimport { MarkdownRenderer } from '~/components/markdown-renderer'\nimport { Tag } from '~/components/tag'\n\ntype LoaderData = {\n  post: Post\n}\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const slug = z.string().parse(params.slug)\n  const post = await get(slug)\n  // TODO: redirect to 404 on missing post...\n  return { title: post?.title, subtitle: post?.date, post }\n}\n\nexport default function SlugRoute() {\n  const data = useLoaderData<LoaderData>()\n  return (\n    <main>\n      <MarkdownRenderer hast={data?.post.content} />\n\n      {data?.post.tags?.length > 0 && (\n        <footer data-testid=\"SlugPage__footer\" className=\"py-12\">\n          <div>\n            <div className=\"font-mono dark:text-gray-400\">Tags</div>\n            <ul className=\"dark:text-gray-200 flex space-x-2\">\n              {data?.post.tags?.map((tag) => (\n                <li key={tag}>\n                  <Tag tag={tag} />\n                </li>\n              ))}\n            </ul>\n          </div>\n        </footer>\n      )}\n    </main>\n  )\n}\n", "import { Link } from '@remix-run/react'\nimport clsx from 'clsx';\nimport { Fragment } from 'react';\nimport { ReactNode } from 'react';\nimport { ReactElement, createElement } from 'react'\nimport type { HtmlAst, HtmlAstNode, HtmlAstNodeMap } from '~/lib/hast.types'\nimport { PrunedHast } from '~/lib/parse-markdown';\n\nconst H = ({ level = 2, children, ...props }: { level?: number; children: ReactNode } & JSX.IntrinsicElements['h2']) => {\n  const tag = `h${Math.max(Math.min(level, 6), 1)}`\n  let styles = {\n\t\th1: '',\n\t\th2: 'mt-16 mb-6 text-3xl',\n\t\th3: 'mt-12 mb-4 text-2xl',\n\t\th4: 'mt-10 mb-4 text-xl',\n\t\th5: 'mt-6 mb-4 text-lg',\n\t\th6: 'mt-6 mb-4 text-base'\n\t}\n\n  return createElement(\n    tag, \n    {\n      ...props, \n      className: clsx(styles[tag as unknown as keyof typeof styles], 'font-medium') \n    }, \n    children\n  )\n}\n\n// const Ol = \n\nconst hastNodeComponents: { \n  [K in keyof HtmlAstNodeMap]: (node: HtmlAstNodeMap[K]) => React.ReactNode\n} = {\n  text: (node) => <>{node.value}</>,\n  paragraph: (node) => <p className=\"mb-6 text-base leading-7\"><InternalMarkdownRenderer nodes={node.children} /></p>,\n  // TODO: stylezzzz\n  link: (node) => <Link to={node.url} className=\"font-bold\"><InternalMarkdownRenderer nodes={node.children} /></Link>,\n  heading: (node) => <H level={node.depth}><InternalMarkdownRenderer nodes={node.children} /></H>,\n  thematicBreak: (node) => <hr className=\"relative h-auto my-16 font-mono tracking-tighter text-center border-none before:content-['*_*_*'] before:text-lg dark:text-gray-400\" />,\n  strong: (node) => <strong><InternalMarkdownRenderer nodes={node.children} /></strong>,\n  emphasis: (node) => <em><InternalMarkdownRenderer nodes={node.children} /></em>,\n  list: (node) => {\n    if (node.ordered) return (\n      // TODO: ol styles\n      <ol className=\"pl-8 list-none\"><InternalMarkdownRenderer nodes={node.children} /></ol>\n    )\n\n    // TODO: ul styles\n    return (\n      <ul className=\"pl-6 list-none\"><InternalMarkdownRenderer nodes={node.children} /></ul>\n    )\n  },\n  // TODO: li styles\n  listItem: (node) => <li className='relative pl-2 my-4 text-base leading-7 before:-left-4 before:absolute'><InternalMarkdownRenderer nodes={node.children} /></li>,\n  blockquote: (node) => <blockquote><InternalMarkdownRenderer nodes={node.children} /></blockquote>,\n  inlineCode: (node) => <code className=\"bg-gray-100 dark:bg-gray-700 p-1 break-words\">{node.value}</code>,\n  code: (node) => <pre className=\"rounded-none p-6 pt-8 my-6 -mx-4 overflow-auto text-base bg-gray-100 md:mx-0 lg:-mx-6 dark:bg-gray-900\"><code dangerouslySetInnerHTML={{ __html: node.value }}></code></pre>,\n  image: (node) => <img src={node.url} alt={node.alt} />\n}\n\n\nfunction InternalMarkdownRenderer({ nodes }: { nodes?: HtmlAstNode[]}) {\n  if (!nodes) return null\n  return (\n    <>{nodes.map((node, i) => {\n      const mapper = hastNodeComponents[node.type]\n      const content = mapper ? mapper(node as any) : null\n      return <Fragment key={i}>{content}</Fragment>\n    })}</>\n  )\n}\n  \nexport function MarkdownRenderer({ hast }: { hast?: PrunedHast; }) {\n  if (!hast) return null\n  return <div className=\"prose dark:prose-invert font-mono mx-auto max-w-prose\"><InternalMarkdownRenderer nodes={hast.children}/></div>\n}", "import type { LoaderFunction } from '@remix-run/node'\nimport { useLoaderData } from '@remix-run/react'\nimport { MarkdownRenderer } from '~/components/markdown-renderer'\nimport {readFile} from '~/lib/read-file.server'\nimport { processContent } from '~/lib/process-content'\nimport type { PrunedHast } from '~/lib/parse-markdown'\n\ntype LoaderData = {\n  title:string;\n  subtitle:string\n  hast: PrunedHast\n}\n\nexport const loader: LoaderFunction = async (): Promise<LoaderData> => {\n  const content = await readFile('../content/intro.md')\n  const { hast } = await processContent(content)\n  return {\n    title: \"Hi, I'm Ben! \uD83D\uDD25\",\n    subtitle: \"I'm a front-end software engineer based out of Seattle\",\n    hast\n  }\n}\n\nexport default function Index() {\n  const data = useLoaderData<LoaderData>()\n  return (\n    <MarkdownRenderer hast={data?.hast} />\n  )\n}\n", "import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nexport const readFile = (filePath: string) => {\n  return fs.readFile(path.join(__dirname, filePath), 'utf8')\n}\n", "export default {'version':'e166aba1','entry':{'module':'/build/entry.client-5SYKBE6O.js','imports':['/build/_shared/chunk-ABTTC3DG.js','/build/_shared/chunk-O4KJ4E6X.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-4JPZMWT6.js','imports':['/build/_shared/chunk-ZGBXNB65.js','/build/_shared/chunk-SLRCBVSX.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/$slug':{'id':'routes/$slug','parentId':'root','path':':slug','index':undefined,'caseSensitive':undefined,'module':'/build/routes/$slug-ROTIESRL.js','imports':['/build/_shared/chunk-YY5ZG7H2.js','/build/_shared/chunk-JVJ3WJ3F.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-565BG7JY.js','imports':['/build/_shared/chunk-JVJ3WJ3F.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/tags/$tag':{'id':'routes/tags/$tag','parentId':'root','path':'tags/:tag','index':undefined,'caseSensitive':undefined,'module':'/build/routes/tags/$tag-5ZSSRM4I.js','imports':['/build/_shared/chunk-5UH6TC4B.js','/build/_shared/chunk-YY5ZG7H2.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/writing':{'id':'routes/writing','parentId':'root','path':'writing','index':undefined,'caseSensitive':undefined,'module':'/build/routes/writing-CDRR4I7W.js','imports':['/build/_shared/chunk-5UH6TC4B.js','/build/_shared/chunk-YY5ZG7H2.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-E166ABA1.js'};", "\nimport * as entryServer from \"/Users/benjaminjohnson/dev/portfolio/remix-run/app/entry.server.tsx\";\nimport * as route0 from \"/Users/benjaminjohnson/dev/portfolio/remix-run/app/root.tsx\";\nimport * as route1 from \"/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/tags/$tag.tsx\";\nimport * as route2 from \"/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/writing.tsx\";\nimport * as route3 from \"/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/$slug.tsx\";\nimport * as route4 from \"/Users/benjaminjohnson/dev/portfolio/remix-run/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/tags/$tag\": {\n      id: \"routes/tags/$tag\",\n      parentId: \"root\",\n      path: \"tags/:tag\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/writing\": {\n      id: \"routes/writing\",\n      parentId: \"root\",\n      path: \"writing\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/$slug\": {\n      id: \"routes/$slug\",\n      parentId: \"root\",\n      path: \":slug\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    }\n  };"],
  "mappings": "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",
  "names": []
}
